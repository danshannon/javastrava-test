# Configuration details for the strava-util package
 
# Username and password to use in anger when logging in to the Strava API
# Obviously, you should change these to what you really use!
# NOTE that the Strava API uses the email address as the username and NOT athlete.getUsername() which is actually used to construct the 'vanity URL' on Strava
username=
password=

# The Strava application ID (on your profile/settings/API page on Strava)
strava_application_id=

# The Strava client secret (on your profile/settings/API page on Strava)
client_secret=
 
# Access tokens
test.activityServicesImplTest.validToken=
test.activityServicesImplTest.invalidToken=
 
# Activity which DOES NOT exist
test.activityServicesImplTest.activityInvalid=4
 
# Activity which has >0 segment efforts
test.activityServicesImplTest.activityWithEfforts=
 
# Activity which has >0 photos
test.activityServicesImplTest.activityWithPhotos=
 
# Activity which has 0 photos
test.activityServicesImplTest.activityWithoutPhotos=
 
# Activity which has >=2 comments
test.activityServicesImplTest.activityWithComments=
 
# Activity which has 0 comments
test.activityServicesImplTest.activityWithoutComments=
 
# Activity which has >=2 kudos
test.activityServicesImplTest.activityWithKudos=
 
# Activity which has 0 kudos
test.activityServicesImplTest.activityWithoutKudos=
 
# Activity which has >0 laps
test.activityServicesImplTest.activityWithLaps=
 
# Activity which has 0 laps
test.activityServicesImplTest.activityWithoutLaps=
 
# Activity which has activity zones (i.e. a suffer score)
test.activityServicesImplTest.activityWithZones=
 
# Activity which has 0 activity zones
test.activityServicesImplTest.activityWithoutZones=
 
# Activity which belongs to the user corresponding to the valid token
test.activityServicesImplTest.activityBelongingToAuthenticatedUser=
 
# activity which DOES NOT belong to the user corresponding to the valid token, but is still public
test.activityServicesImplTest.activityBelongingToUnauthenticatedUser=

# private activity that belongs to another user
test.activityServicesImplTest.activityPrivateOtherUser=

# private activity belonging to the authenticated user
test.activityServicesImplTest.activityPrivateAuthenticatedUser=

# private activity belonging to the authenticated user, with photos
test.activityServicesImplTest.activityPrivatePhotos=

# activity which is a run belonging to another user
test.activityServicesImplTest.activityRunOtherUser=
 
#############
# ATHLETE SERVICES DATA
#############
# Athlete id for the athlete associated with the username and password
test.athleteServicesImplTest.authenticatedAthleteId=
 
# Athlete id for some other athlete (not the authenticated one)
test.athleteServicesImplTest.athleteId=
 
# Invalid athlete id
test.athleteServicesImplTest.athleteInvalidId=0
 
# Athlete without KOMs
test.athleteServicesImplTest.athleteWithoutKOMs=
 
# Athlete without friends
test.athleteServicesImplTest.athleteWithoutFriends=

# Athlete with privacy on
test.athleteServicesImplTest.athletePrivate=
 
#############
# CLUB SERVICES DATA
#############
# Club id for the athlete associated with the username and password
test.clubServicesImplTest.clubId=
 
# Invalid Club id
test.clubServicesImplTest.clubInvalidId=
 
# Club of which the athlete is NOT a member
test.clubServicesImplTest.clubNonMemberId=
 
# Private club of which the athlete is a member
test.clubServicesImplTest.clubPrivateMemberId=
 
# Private club of which the athlete is NOT a member
test.clubServicesImplTest.clubPrivateNonMemberId=
 
##############
# GEAR SERVICES DATA
##############
# Gear id for valid gear which belongs to the athlete associated with the username and password (NB this starts with a lower-case 'b' for bikes!)
test.gearServicesImplTest.gearId=
 
# Gear id for invalid gear
test.gearServicesImplTest.gearInvalidId=b0
 
# Gear id for gear that belongs to another athlete
test.gearServicesImplTest.gearOtherAthleteId=
 
##############
# SEGMENT EFFORT SERVICES DATA
##############
# Segment effort id for a valid effort
test.segmentEffortServicesImplTest.segmentEffortId=
 
# Segment effort id for an invalid effort
test.segmentEffortServicesImplTest.segmentEffortInvalidId=0

# Segment effort id for an effort on a private segment
test.segmentEffortServicesImplTest.segmentEffortPrivateId=

# Segment effort id for an effort on a private segment that belongs to another user
test.segmentEffortServicesImplTest.segmentEffortOtherUserPrivateId=
 
##############
# SEGMENT SERVICES DATA
##############
# Segment id for a valid segment
test.segmentServicesImplTest.segmentId=
 
# Segment id for an invalid segment
test.segmentServicesImplTest.segmentInvalidId=0

# Segment id for a private segment belonging to the authenticated user
test.segmentServicesImplTest.segmentPrivateId=

# Segment id for a private segment belonging to another user
test.segmentServicesImplTest.segmentOtherUserPrivateId=

# Segment id for a segment flagged as hazardous
test.segmentServicesImplTest.segmentHazardousId=

# Segment id for a segment which is starred AND private
test.segmentServicesImplTest.segmentPrivateStarredId=